df$year <- format(df$date, "%Y")
ggplot(df) + aes(month, year, group = year, color = year) + geom_line()
ggplot(df) + aes(month, monthlyHighs, group = year, color = year) + geom_line()
as.numeric(period.max(Cl(stock),endpoints(stock,on='months')))
stockSymbols(stock)
stock$symbol
stock$name
stock.sticker
stock.tickers
stock.tickers
l.out
title
ggplot(df) + aes(month, monthlyHighs, group = year, color = year) + geom_line() + ggtitle(title)
data.name
data.name <- readline(prompt = "Enter Stock Symbol: ")
stock <-getSymbols(data.name, auto.assign = F ) #access CLose and Open with stock$MOTS.Open
monthlyHighs <- as.numeric(period.max(Cl(stock),endpoints(stock,on='months')))
df <- data.frame(date=index(monthlyReturn(stock)), value=coredata(monthlyHighs), row.names=NULL )
df$month <- factor(format(df$date, "%b"), levels = month.abb)
df$year <- format(df$date, "%Y")
title <- paste( "Monthly Highs for ", data.name)
ggplot(df) + aes(month, monthlyHighs, group = year, color = year) + geom_line() + ggtitle(title)
stock
data.name <- readline(prompt = "Enter Stock Symbol: ")
stock <-getSymbols(data.name, auto.assign = F ) #access CLose and Open with stock$MOTS.Open
monthlyHighs <- as.numeric(period.max(Cl(stock),endpoints(stock,on='months')))
df <- data.frame(date=index(monthlyReturn(stock)), value=coredata(monthlyHighs), row.names=NULL )
df$month <- factor(format(df$date, "%b"), levels = month.abb)
df$year <- format(df$date, "%Y")
title <- paste( "Monthly Highs for ", data.name)
ggplot(df) + aes(month, monthlyHighs, group = year, color = year) + geom_line() + ggtitle(title)
source('~/Documents/stocks/seasonPlots.R')
title
ggplot(df) + aes(month, monthlyHighs, group = year, color = year) + geom_line() + ggtitle(title)
source('~/Documents/stocks/seasonPlots.R')
library(quantmod)
library(xts)
library(rvest)
library(tidyverse)
library(stringr)
library(forcats)
library(lubridate)
library(plotly)
library(dplyr)
library(forecast)
library(ggplot2)
library(PerformanceAnalytics)
data.name <- readline(prompt = "Enter Stock Symbol: ")
stock <-getSymbols(data.name, auto.assign = F ) #access CLose and Open with stock$MOTS.Open
monthlyHighs <- as.numeric(period.max(Hi(stock),endpoints(stock,on='months')))
monthlyLows <- as.numeric(period.min(Lo(stock),endpoints(stock,on='months')))
df <- data.frame(date=index(monthlyReturn(stock)), value=coredata(monthlyHighs), row.names=NULL )
df$month <- factor(format(df$date, "%b"), levels = month.abb)
df$year <- format(df$date, "%Y")
title <- paste( "Monthly Highs for ", data.name)
ggplot(df) + aes(month, monthlyHighs, group = year, color = year) + geom_line() + ggtitle(title)
df <- data.frame(date=index(monthlyReturn(stock)), value=coredata(monthlyLows), row.names=NULL )
df$month <- factor(format(df$date, "%b"), levels = month.abb)
df$year <- format(df$date, "%Y")
title <- paste( "Monthly Lows for ", data.name)
ggplot(df) + aes(month, monthlyLows, group = year, color = year) + geom_line() + ggtitle(title)
source('~/Documents/stocks/seasonPlots.R')
source('~/Documents/stocks/seasonPlots.R')
df <- data.frame(date=index(monthlyReturn(stock)), value=coredata(monthlyLows), row.names=NULL )
df$month <- factor(format(df$date, "%b"), levels = month.abb)
df$year <- format(df$date, "%Y")
title <- paste( "Monthly Lows for ", data.name)
ggplot(df) + aes(month, monthlyLows, group = year, color = year) + geom_line() + ggtitle(title)
par(mfrow=c(1,2))
par(mfrow=c(1,2))
df <- data.frame(date=index(monthlyReturn(stock)), value=coredata(monthlyHighs), row.names=NULL )
df$month <- factor(format(df$date, "%b"), levels = month.abb)
df$year <- format(df$date, "%Y")
title <- paste( "Monthly Highs for ", data.name)
ggplot(df) + aes(month, monthlyHighs, group = year, color = year) + geom_line() + ggtitle(title)
df <- data.frame(date=index(monthlyReturn(stock)), value=coredata(monthlyLows), row.names=NULL )
df$month <- factor(format(df$date, "%b"), levels = month.abb)
df$year <- format(df$date, "%Y")
title <- paste( "Monthly Lows for ", data.name)
ggplot(df) + aes(month, monthlyLows, group = year, color = year) + geom_line() + ggtitle(title)
source('~/Documents/stocks/seasonPlots.R')
require(gridExtra)
source('~/Documents/stocks/seasonPlots.R')
grid.arrange(plot1, plot2, ncol=1)
source('~/Documents/stocks/trendStrategy.R')
addTA(adx, col = c("green", "red", "blue"), lwd = c(1, 1, 2), legend = NULL)
adx <- ADX(HLC(dat), n = 14, maType = "EMA", wilder = TRUE)[, c("DIp", "DIn", "ADX")]
dat
dat[,-5]
source('~/Documents/stocks/trendStrategy.R')
adx <- ADX(HLC(dat), n = 14, maType = "EMA", wilder = TRUE)[, c("DIp", "DIn", "ADX")]
addTA(adx, col = c("green", "red", "blue"), lwd = c(1, 1, 2), legend = NULL)
dat
dat.name
dat$name
dat$symbol
source('~/Documents/stocks/trendStrategy.R')
source('~/Documents/stocks/trendStrategy.R')
source('~/Documents/stocks/trendStrategy.R')
source('~/Documents/stocks/trendStrategy.R')
addTA(adx, col = c("green", "red", "blue"), lwd = c(1, 1, 2), legend = NULL)
candleChart(dat[,-5], multi.col = TRUE, theme = "white", subset = "last 9 months", name=data.name, TA="addADX()" )
source('~/Documents/stocks/trendStrategy.R')
candleChart(dat[,-5], multi.col = TRUE, theme = "white", subset = "last 9 months", name=data.name)
addADX()
candleChart(dat[,-5], multi.col = TRUE, theme = "white", subset = "last 9 months", name=data.name)
reChart(major.ticks='months',subset='first 16 weeks')
addADX()
reChart(major.ticks='months',subset='first 16 weeks')
addADX()
addADX()
candleChart(dat[,-5], multi.col = TRUE, theme = "white", subset = "last 9 months", name=data.name)
addADX()
chart_Series(dat[,-5])
addADX()
source('~/Documents/stocks/trendStrategy.R')
library(quantmod)
chart_Series(dat[,-5], subset='last 3 months')
source('~/Documents/stocks/trendStrategy.R')
source('~/Documents/stocks/trendStrategy.R')
source('~/Documents/stocks/trendStrategy.R')
dat.date
dat.$DATE
dat$date
dat <- subset(dat, date >= dat$date)
dat$date
source('~/Documents/stocks/trendStrategy.R')
source('~/Documents/stocks/trendStrategy.R')
fig
source('~/Documents/stocks/trendStrategy.R')
fig
source('~/Documents/stocks/trendStrategy.R')
fig
fig <- df %>% plot_ly(x = ~date, type="ohlc",
open = ~Open, close = ~Close,
high = ~High, low = ~Low)
fig <- fig %>% layout(title = "Basic OHLC Chart")
fig
source('~/Documents/stocks/trendStrategy.R')
index(stock)
last( index(stock) )
head( index(stock) )
first( index(stock) )
source('~/Documents/stocks/trendStrategy.R')
fig
macd  <- MACD( stock[,"Close"], 12, 26, 9, maType="EMA" )
stock
stock[,-5]
macd  <- MACD( stock[,-5], 12, 26, 9, maType="EMA" )
macd = MACD(stock[,4], nFast=12, nSlow=26,nSig=9,maType=SMA, percent = FALSE)
chartSeries(NSEI, TA="addMACD()")
macd = MACD(stock[,4], nFast=12, nSlow=26,nSig=9,maType=SMA, percent = FALSE)
chartSeries(dat, TA="addMACD()")
source('~/Documents/stocks/trendStrategy.R')
source('~/Documents/stocks/trendStrategy.R')
source('~/Documents/stocks/trendStrategy.R')
source('~/Documents/stocks/trendStrategy.R')
stock[,4]
tail( stock[,4] )
macd <- MACD(stock[,4], nFast=12, nSlow=26,nSig=9,maType=SMA, percent = FALSE)
chartSeries(dat, TA="addMACD()")
source('~/Documents/stocks/trendStrategy.R')
source('~/Documents/stocks/trendStrategy.R')
dat
dat[,4]
head( dat[,4] )
tail( dat[,4] )
source('~/Documents/stocks/trendStrategy.R')
source('~/Documents/stocks/trendStrategy.R')
source('~/Documents/stocks/trendStrategy.R')
dat[,4]
source('~/Documents/stocks/trendStrategy.R')
source('~/Documents/stocks/trendStrategy.R')
source('~/Documents/stocks/trendStrategy.R')
source('~/Documents/stocks/trendStrategy.R')
source('~/Documents/stocks/trendStrategy.R')
source('~/Documents/stocks/trendStrategy.R')
macd <- MACD(dat[,4], nFast=12, nSlow=26,nSig=9,maType="EMA" )
mac
macd
macd&signal
macd&signal()
macd&signalCondition()
macd$macd
macd = MACD(dat[,4], nFast=12, nSlow=26,nSig=9,maType="EMA" )
macd$macd
macd
macd = MACD(dat[,4], nFast=12, nSlow=26,nSig=9,maType="EMA" )
chartSeries(stock, TA="addMACD()")
signal <- Lag(ifelse(macd$macd < macd$signal, -1, 1))
returns <- ROC(data)*signal
returns <- returns['2008-06-02/2015-09-22']
portfolio <- exp(cumsum(returns))
plot(portfolio)
table.Drawdowns(ret, top=10)
table.DownsideRisk(ret)
charts.PerformanceSummary(ret)
macd = MACD(dat, nFast=12, nSlow=26,nSig=9,maType="EMA" )
chartSeries(stock, TA="addMACD()")
signal <- Lag(ifelse(macd$macd < macd$signal, -1, 1))
returns <- ROC(data)*signal
returns <- returns['2008-06-02/2015-09-22']
portfolio <- exp(cumsum(returns))
plot(portfolio)
table.Drawdowns(ret, top=10)
table.DownsideRisk(ret)
charts.PerformanceSummary(ret)
macd = MACD(dat, nFast=12, nSlow=26,nSig=9,maType="EMA" )
macd = MACD(dat[,4], nFast=12, nSlow=26,nSig=9,maType="EMA" )
macd
str(mcd)
str(macd)
macd$signal
macd.signal
macd[1]
macd[2]
MACD.macd$signal
View(dat)
View(macd)
View(macd)
View(macd)
class(macd)
signal <- Lag(ifelse(macd$macd < macd$signal, -1, 1))
macd[signal]
macd["signal"]
macd
macd[2,]
macd[,2]
macd
macd[,1]
macd[,2]
macd[2,]
signal <- Lag(ifelse(macd[1,] < macd[,2], -1, 1))
macd.mcad
mcad$signal
mcad$Signal
mcad
inspect(mcad)
macd = MACD(dat[,4], nFast=12, nSlow=26,nSig=9,maType="EMA" )
macd
test <- as.matrix(macd)
test$signal
test.signal
source('~/Documents/stocks/startSimulation.R')
source('~/Documents/stocks/startSimulation.R')
source('~/Documents/stocks/startSimulation.R')
install.packages("pander")
sessionInfo()
source('~/Documents/stocks/startSimulation.R')
source('~/Documents/stocks/startSimulation.R')
currency("USD")
source('~/Documents/stocks/startSimulation.R')
source('~/Documents/stocks/startSimulation.R')
source('~/Documents/stocks/startSimulation.R')
source('~/Documents/stocks/startSimulation.R')
source('~/Documents/stocks/startSimulation.R')
source('~/Documents/stocks/startSimulation.R')
source('~/Documents/stocks/startSimulation.R')
source('~/Documents/stocks/startSimulation.R')
source('~/Documents/stocks/startSimulation.R')
getSymbols("CAT")
cat
CAT
last(CAT)
last(CAT)
CAT
tail( CAT )
source('~/Documents/stocks/startSimulation.R')
head(IWM)
source('~/Documents/stocks/startSimulation.R')
source('~/Documents/stocks/startSimulation.R')
summary(IWM)
source('~/Documents/stocks/startSimulation.R')
source('~/Documents/stocks/startSimulation.R')
source('~/Documents/stocks/startSimulation.R')
source('~/Documents/stocks/startSimulation.R')
source('~/Documents/stocks/startSimulation.R')
source('~/Documents/stocks/startSimulation.R')
cwd <- getwd()
setwd("./_data/")
results_file <- paste("results", strategy.st, "RData", sep = ".")
if( file.exists(results_file) ) {
load(results_file)
} else {
results <- applyStrategy(strategy.st, portfolios = portfolio.st)
updatePortf(portfolio.st)
updateAcct(account.st)
updateEndEq(account.st)
if(checkBlotterUpdate(portfolio.st, account.st, verbose = TRUE)) {
save(list = "results", file = results_file)
save.strategy(strategy.st)
}
}
setwd(cwd)
source('~/Documents/stocks/startSimulation.R')
checkBlotterUpdate()
save.strategy()
results_file
results <- applyStrategy(strategy.st, portfolios = portfolio.st)
source('~/Documents/stocks/startSimulation.R')
require(quantstrat)
rm(list=ls())
setwd("/home/joel/Documents/stocks/strategy")
source("luxor.include.R")
.fast = 10
.slow = 30
source("luxor.getSymbols.R")
initPortf(portfolio.st, symbols='GBPUSD', currency='USD')
initAcct(account.st, portfolios=portfolio.st, currency='USD')
initOrders(portfolio.st)
strategy(strategy.st, store=TRUE)
add.indicator(strategy.st, name = "SMA",
arguments = list(
x = quote(Cl(mktdata)[,1]),
n = .fast
),
label="nFast"
)
add.indicator(strategy.st, name="SMA",
arguments = list(
x = quote(Cl(mktdata)[,1]),
n = .slow
),
label="nSlow"
)
getwd()
add.signal(strategy.st, name='sigCrossover',
arguments = list(
columns=c("nFast","nSlow"),
relationship="gte"
),
label='long'
)
add.signal(strategy.st, name='sigCrossover',
arguments = list(
columns=c("nFast","nSlow"),
relationship="lt"
),
label='short'
)
add.rule(strategy.st, name='ruleSignal',
arguments=list(sigcol='long' , sigval=TRUE,
orderside='short',
ordertype='market',
orderqty='all',
TxnFees=.txnfees,
replace=TRUE
),
type='exit',
label='Exit2LONG'
)
add.rule(strategy.st, name='ruleSignal',
arguments=list(sigcol='short', sigval=TRUE,
orderside='long' ,
ordertype='market',
orderqty='all',
TxnFees=.txnfees,
replace=TRUE
),
type='exit',
label='Exit2SHORT'
)
add.rule(strategy.st, name='ruleSignal',
arguments=list(sigcol='long' , sigval=TRUE,
orderside='long' ,
ordertype='stoplimit', prefer='High', threshold=.threshold,
orderqty=+.orderqty,
replace=FALSE
),
type='enter',
label='EnterLONG'
)
add.rule(strategy.st, name='ruleSignal',
arguments=list(sigcol='short', sigval=TRUE,
orderside='short',
ordertype='stoplimit', prefer='Low', threshold=-.threshold,
orderqty=-.orderqty,
replace=FALSE
),
type='enter',
label='EnterSHORT'
)
applyStrategy(strategy.st, portfolio.st)
print(getOrderBook(portfolio.st)[[portfolio.st]]$GBPUSD)
updatePortf(portfolio.st, Symbols='GBPUSD', Dates=paste('::',as.Date(Sys.time()),sep=''))
chart.Posn(portfolio.st, "GBPUSD")
print(t(tradeStats(portfolio.st, 'GBPUSD')))
1e5
chartSeries(GBPUSD)
require(quantstrat)
rm(list=ls())
setwd("/home/joel/Documents/stocks/strategy")
source("luxor.include.R")
.fast = 10
.slow = 30
source("luxor.getSymbols.R")
initPortf(portfolio.st, symbols=stock.str)
initAcct(account.st, portfolios=portfolio.st, currency='USD')
initOrders(portfolio.st)
strategy(strategy.st, store=TRUE)
add.indicator(strategy.st, name = "SMA",
arguments = list(
x = quote(Cl(mktdata)[,1]),
n = .fast
),
label="nFast"
)
add.indicator(strategy.st, name="SMA",
arguments = list(
x = quote(Cl(mktdata)[,1]),
n = .slow
),
label="nSlow"
)
add.signal(strategy.st, name='sigCrossover',
arguments = list(
columns=c("nFast","nSlow"),
relationship="gte"
),
label='long'
)
add.signal(strategy.st, name='sigCrossover',
arguments = list(
columns=c("nFast","nSlow"),
relationship="lt"
),
label='short'
)
add.rule(strategy.st, name='ruleSignal',
arguments=list(sigcol='long' , sigval=TRUE,
orderside='short',
ordertype='market',
orderqty='all',
TxnFees=.txnfees,
replace=TRUE
),
type='exit',
label='Exit2LONG'
)
add.rule(strategy.st, name='ruleSignal',
arguments=list(sigcol='short', sigval=TRUE,
orderside='long' ,
ordertype='market',
orderqty='all',
TxnFees=.txnfees,
replace=TRUE
),
type='exit',
label='Exit2SHORT'
)
add.rule(strategy.st, name='ruleSignal',
arguments=list(sigcol='long' , sigval=TRUE,
orderside='long' ,
ordertype='stoplimit', prefer='High', threshold=.threshold,
orderqty=+.orderqty,
replace=FALSE
),
type='enter',
label='EnterLONG'
)
add.rule(strategy.st, name='ruleSignal',
arguments=list(sigcol='short', sigval=TRUE,
orderside='short',
ordertype='stoplimit', prefer='Low', threshold=-.threshold,
orderqty=-.orderqty,
replace=FALSE
),
type='enter',
label='EnterSHORT'
)
getSymbols(stock.str, from=.from)
for(i in stock.str)
for(i in stock.str){
assign(i, adjustOHLC(get(i),use.Adjusted=TRUE))
}
applyStrategy(strategy.st, portfolio.st)
updatePortf(portfolio.st, Symbols='macross', Dates=paste('::',as.Date(Sys.time()),sep=''))
updatePortf(portfolio.st, Symbols='forex', Dates=paste('::',as.Date(Sys.time()),sep=''))
updatePortf(portfolio.st, Symbols='AAPL', Dates=paste('::',as.Date(Sys.time()),sep=''))
chart.Posn(portfolio.st, "forex")
rm(list=ls())
setwd("/home/joel/Documents/stocks/strategy")
stock.str='AAPL' # what are we trying it on
currency('USD')
stock(stock.str,currency='USD',multiplier=1)
startDate="1999-12-31"
initEq=1000000
portfolio.st='macross'
account.st='macross'
initPortf(portfolio.st,symbols=stock.str)
#> [1] "macross"
initAcct(account.st,portfolios=portfolio.st, initEq=initEq)
#> [1] "macross"
initOrders(portfolio=portfolio.st)
stratMACROSS<- strategy(portfolio.st)
stratMACROSS <- add.indicator(strategy = stratMACROSS, name = "SMA", arguments = list(x=quote(Cl(mktdata)), n=50),label= "ma50" )
stratMACROSS <- add.indicator(strategy = stratMACROSS, name = "SMA", arguments = list(x=quote(Cl(mktdata)[,1]), n=200),label= "ma200")
stratMACROSS <- add.signal(strategy = stratMACROSS,name="sigCrossover",arguments = list(columns=c("ma50","ma200"), relationship="gte"),label="ma50.gt.ma200")
stratMACROSS <- add.signal(strategy = stratMACROSS,name="sigCrossover",arguments = list(column=c("ma50","ma200"),relationship="lt"),label="ma50.lt.ma200")
stratMACROSS <- add.rule(strategy = stratMACROSS,name='ruleSignal', arguments = list(sigcol="ma50.gt.ma200",sigval=TRUE, orderqty=100, ordertype='market', orderside='long'),type='enter')
stratMACROSS <- add.rule(strategy = stratMACROSS,name='ruleSignal', arguments = list(sigcol="ma50.lt.ma200",sigval=TRUE, orderqty='all', ordertype='market', orderside='long'),type='exit')
getSymbols(stock.str,from=startDate)
#> [1] "AAPL"
for(i in stock.str)
assign(i, adjustOHLC(get(i),use.Adjusted=TRUE))
out<-applyStrategy(strategy=stratMACROSS , portfolios=portfolio.st)
updatePortf(Portfolio='macross',Dates=paste('::',as.Date(Sys.time()),sep=''))
chart.Posn(Portfolio='macross',Symbol=stock.str, TA=c("add_SMA(n=50,col='red')","add_SMA(n=200,col='blue')"))
print(t(tradeStats(portfolio.st, 'macross')))
tstats <- tradeStats(Portfolios = portfolio.st)
tstats[, 4:ncol(tstats)] <- round(tstats[, 4:ncol(tstats)],2)
print(data.frame(t(tstats[,-c(1,2)])))
